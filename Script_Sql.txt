-- Crear la base de datos cine
CREATE DATABASE IF NOT EXISTS cine;
USE cine;

-- Crear la tabla genero
CREATE TABLE IF NOT EXISTS genero (
    idGenero INT(10) PRIMARY KEY AUTO_INCREMENT,
    genero VARCHAR(150) NOT NULL
);

-- Insertar datos en la tabla genero
INSERT INTO genero (genero)
VALUES
    ('Acción'),
    ('Terror'),
    ('Sci-Fi'),
    ('Drama'),
    ('Romance'),
    ('Comedia'),
    ('Infantil');

-- Crear la tabla clasificacion
CREATE TABLE IF NOT EXISTS clasificacion (
    idClasificacion INT(10) PRIMARY KEY AUTO_INCREMENT,
    clasificacion VARCHAR(50) NOT NULL
);

-- Insertar datos en la tabla clasificacion
INSERT INTO clasificacion (clasificacion)
VALUES
    ('Para todo público'),
    ('Mayores de 13 años'),
    ('Mayores de 18 años'),
    ('Menores de 13 años');

-- Crear la tabla cine
CREATE TABLE IF NOT EXISTS cine (
    idCine INT(10) PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(255) NOT NULL,
    direccion VARCHAR(150) NOT NULL,
    telefono VARCHAR(50) NOT NULL
);

-- Insertar datos en la tabla cine
INSERT INTO cine (nombre, direccion, telefono)
VALUES
    ('Cinema Valle de Atriz', 'CC Valle de Atriz', '7234567'),
    ('Royal Films', 'Av Panamericana', '7233456'),
    ('Royal Films', 'CC Unico', '7212334'),
    ('Cinemark', 'CC. Unicentro', '7244576'),
    ('Cine Colombia', 'Calle 18 No. 22-45', '7223456'),
    ('Col', 'Calle 18 No. 22-45', '7223456');

-- Crear la tabla pelicula
CREATE TABLE IF NOT EXISTS pelicula (
    idPelicula INT(10) PRIMARY KEY AUTO_INCREMENT,
    titulo VARCHAR(150) NOT NULL,
    protagonista VARCHAR(150),
    horario VARCHAR(50),
    idGenero INT(10),
    idClasificacion INT(10),
    imagen_url VARCHAR(255),
    FOREIGN KEY (idGenero) REFERENCES genero (idGenero),
    FOREIGN KEY (idClasificacion) REFERENCES clasificacion (idClasificacion)
);

-- Insertar datos en la tabla pelicula
INSERT INTO pelicula (titulo, protagonista, horario, idGenero, idClasificacion, imagen_url)
VALUES
    ('Rapidos y furiosos X', 'Vin Diesel', '3:00pm, 6:00pm, 9:00pm', 1, 2, 'https://depor.com/resizer/frYh9JMjTmkI_few0UyKK7WGvCU=/620x0/smart/filters:format(jpeg):quality(75)/cloudfront-us-east-1.images.arcpublishing.com/elcomercio/K3ZVO6CHINGL5OWBS45TZM4BRI.jpg'),
    ('Avatar 2', 'Sam Worthington', '3:00pm, 6:00pm, 9:00pm', 3, 2, 'https://akm-img-a-in.tosshub.com/indiatoday/images/story/202212/avatar_2_movie_review-sixteen_nine.jpg?VersionId=Qz2xqVfDHDuBDCcnQ2C_hcjwK9IhQCHc&size=690:388'),
    ('Transformers', 'Michael Bay', '3:00pm, 6:00pm, 9:00pm', 3, 2, 'https://images.alphacoders.com/111/11.jpg');

-- Crear la tabla cinePelicula
CREATE TABLE IF NOT EXISTS cinePelicula (
    idCine INT(10),
    idPelicula INT(10),
    FOREIGN KEY (idCine) REFERENCES cine (idCine),
    FOREIGN KEY (idPelicula) REFERENCES pelicula (idPelicula)
);

-- Insertar datos en la tabla cinePelicula
INSERT INTO cinePelicula (idCine, idPelicula)
VALUES
    (1, 1),
    (1, 2),
    (2, 1);

-- Trigger para validar la longitud del título de una película (en términos de letras)
DELIMITER //
CREATE TRIGGER before_insert_pelicula
BEFORE INSERT ON pelicula
FOR EACH ROW
BEGIN
    DECLARE num_letras INT;
    
    -- Contar el número de letras en el título
    SET num_letras = LENGTH(new.titulo);

    -- Si el número de letras es menor o igual a 5, no permitir la inserción (ajusta según tu necesidad)
    IF num_letras <= 5 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El título de la película debe tener más de 5 letras.';
    END IF;
END;
//
DELIMITER ;

-- Trigger para agregar am/pm a las horas de las películas
DELIMITER //
CREATE TRIGGER before_insert_horario
BEFORE INSERT ON pelicula
FOR EACH ROW
BEGIN
    -- Agregar 'am' o 'pm' al horario de la película
    SET NEW.horario = CONCAT(NEW.horario, ' ', IF(HOUR(NOW()) < 12, 'am', 'pm'));
END;
//
DELIMITER ;

-- Consulta utilizando JOIN para obtener información combinada de películas
SELECT p.titulo, p.protagonista, p.horario, g.genero, c.clasificacion
FROM pelicula p
JOIN genero g ON p.idGenero = g.idGenero
JOIN clasificacion c ON p.idClasificacion = c.idClasificacion;

-- Procedimiento almacenado para obtener películas por protagonista
DELIMITER //
CREATE PROCEDURE sp_peliculas_por_protagonista(IN protagonista_nombre VARCHAR(100))
BEGIN
    SELECT p.titulo, p.horario, g.genero, c.clasificacion
    FROM pelicula p
    JOIN genero g ON p.idGenero = g.idGenero
    JOIN clasificacion c ON p.idClasificacion = c.idClasificacion
    WHERE p.protagonista LIKE CONCAT('%', protagonista_nombre, '%');
END;
//
DELIMITER ;

-- Vista para obtener la cantidad de películas por género
CREATE VIEW v_peliculas_por_genero AS
SELECT g.genero, COUNT(p.idPelicula) AS cantidad_peliculas
FROM pelicula p
JOIN genero g ON p.idGenero = g.idGenero
GROUP BY g.genero;

-- Vista para obtener la cantidad de películas por clasificación
CREATE VIEW v_peliculas_por_clasificacion AS
SELECT c.clasificacion, COUNT(p.idPelicula) AS cantidad_peliculas
FROM pelicula p
JOIN clasificacion c ON p.idClasificacion = c.idClasificacion
GROUP BY c.clasificacion;

-- Vista para obtener la cantidad de películas por clasificación y género
CREATE VIEW v_peliculas_por_clasificacion_genero AS
SELECT c.clasificacion, g.genero, COUNT(p.idPelicula) AS cantidad_peliculas
FROM pelicula p
JOIN clasificacion c ON p.idClasificacion = c.idClasificacion
JOIN genero g ON p.idGenero = g.idGenero
GROUP BY c.clasificacion, g.genero;
